# -*- coding: utf-8 -*-
"""Untitled12.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qLo1G4L9muejHoVJRPOupGkh_8vyhn30
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import re
import string

from google.colab import files
uploaded = files.upload()   # Choose Fake.csv and True.csv from your system

import pandas as pd
data_fake = pd.read_csv("Fake.csv")
data_true = pd.read_csv("True.csv")

data_fake.head()

data_true.head()

data_fake["class"]=0
data_true["class"]=1

data_fake.shape, data_true.shape

# Take last 10 rows of fake news for manual testing
data_fake_manual_testing = data_fake.tail(10)

# Drop rows from index 23480 down to 2371 (descending)
for i in range(23480, 2370, -1):
    data_fake.drop([i], axis=0, inplace=True)

# Take last 10 rows of true news for manual testing
data_true_manual_testing = data_true.tail(10)

# Drop rows from index 21416 down to 21407 (descending)
for i in range(21416, 21406, -1):
    data_true.drop([i], axis=0, inplace=True)

data_fake.shape,data_true.shape

data_fake_manual_testing["class"]=0
data_true_manual_testing["class"]=1

data_fake_manual_testing.head(10)

data_true_manual_testing.head(10)

data_merge= pd.concat([data_fake, data_true],axis=0)
data_merge.head(10)

data_merge.columns

data= data_merge.drop([ "title" , "subject" , "date"], axis=1)

data.isnull().sum()

data=data.sample(frac=1)

data.head()

data.reset_index(inplace=True)
data.drop(["index"], axis=1, inplace= True)

data.columns

data.head

def wordopt(text):
  text=text.lower()
  text=re.sub("\[.*/\]", "", text)
  text=re.sub("\\W", "", text)
  text = re.sub("http?://\S+|www\.\S+", "", text)
  text=re.sub("<.*?>+" , "" , text)
  text=re.sub("[%s]" % re.escape(string.punctuation), "", text)
  text = re.sub("\n", "", text)
  text=re.sub("\w*\d\w", "", text)
  return text

data["text"] = data["text"].apply(wordopt)

x=data["text"]
y=data["class"]

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.25)

from sklearn.feature_extraction.text import TfidfVectorizer

vectorization = TfidfVectorizer()
xv_train = vectorization.fit_transform(x_train)
xv_test= vectorization.transform(x_test)

from sklearn.linear_model import LogisticRegression

LR = LogisticRegression()
LR.fit(xv_train, y_train)

pred_lr = LR.predict(xv_test)

LR.score(xv_test,y_test)

print(classification_report(y_test, pred_lr))

from sklearn.tree import DecisionTreeClassifier

DT= DecisionTreeClassifier()
DT.fit(xv_train, y_train)

pred_dt= DT.predict(xv_test)

DT.score(xv_test,y_test)

print(classification_report(y_test, pred_lr))

from sklearn.ensemble import GradientBoostingClassifier
GD = GradientBoostingClassifier()
GD.fit(xv_train,y_train)

pred= GD.predict(xv_test)

GD.score(xv_test,y_test)

print(classification_report(y_test, pred))

from sklearn.ensemble import RandomForestClassifier
RF = RandomForestClassifier( random_state=0)
RF.fit(xv_train,y_train)

RF_pred= RF.predict(xv_test)

RF.score(xv_test,y_test)

print(classification_report(y_test, RF_pred))

def output_lable(n):
  if n==0:
    return "Fake News"
  elif n==1:
    return "True News"

def manual_testing(news):
  testing_news = {"text":[news]}
  new_def_test = pd.DataFrame(testing_news)
  new_def_test["text"] = new_def_test["text"].apply(wordopt)
  new_x_test = new_def_test["text"]
  new_xv_test = vectorization.transform(new_x_test)
  pred_LR= LR.predict(new_xv_test)
  pred_DT= DT.predict(new_xv_test)
  pred_GD= GD.predict(new_xv_test)
  pred_RF= RF.predict(new_xv_test)
  return print("\n\nLR Prediction: {} \nDT Prediction: {} \nGBC Prediction: {} \nRFC Prediction: {}" .format(output))


def output_label(n):
    if n == 0:
        return "Fake News"
    elif n == 1:
        return "True News"

def manual_testing(news):
    # Put input news into a DataFrame
    testing_news = {"text": [news]}
    new_def_test = pd.DataFrame(testing_news)

    # Apply preprocessing (wordopt is your custom cleaning function)
    new_def_test["text"] = new_def_test["text"].apply(wordopt)

    # Extract features using the trained vectorizer
    new_x_test = new_def_test["text"]
    new_xv_test = vectorization.transform(new_x_test)

    # Predictions from trained models
    pred_LR = LR.predict(new_xv_test)
    pred_DT = DT.predict(new_xv_test)
    pred_GD = GD.predict(new_xv_test)
    pred_RF = RF.predict(new_xv_test)

    # Print results
    print("\n\nLR Prediction: {}".format(output_label(pred_LR[0])))
    print("DT Prediction: {}".format(output_label(pred_DT[0])))
    print("GBC Prediction: {}".format(output_label(pred_GD[0])))
    print("RFC Prediction: {}".format(output_label(pred_RF[0])))

news= str(input())
manual_testing(news)

news= str(input())
manual_testing(news)

def manual_testing(news):
    # Example: run predictions with your models
    # (replace with your own model prediction code)
    print("LR Prediction: Fake News")
    print("DT Prediction: True News")
    print("GBC Prediction: Fake News")
    print("RFC Prediction: True News")

# Take input
news = str(input("Enter news: "))
manual_testing(news)

news=str(input())
manual_testing(news)

import streamlit as st

def manual_testing(news):
    # your prediction logic
    output1 = lr.predict([news])[0]
    output2 = dt.predict([news])[0]
    output3 = gbc.predict([news])[0]
    output4 = rfc.predict([news])[0]

    st.write("### Model Predictions")
    st.write("LR Prediction:", output1)
    st.write("DT Prediction:", output2)
    st.write("GBC Prediction:", output3)
    st.write("RFC Prediction:", output4)

!pip install streamlit

import streamlit as st
def manual_testing(news):
    # your prediction logic
    output1 = lr.predict([news])[0]
    output2 = dt.predict([news])[0]
    output3 = gbc.predict([news])[0]
    output4 = rfc.predict([news])[0]

    st.write("### Model Predictions")
    st.write("LR Prediction:", output1)
    st.write("DT Prediction:", output2)
    st.write("GBC Prediction:", output3)
    st.write("RFC Prediction:", output4)

